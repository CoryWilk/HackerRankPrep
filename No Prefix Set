import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {


    static class Node {
        public char data;
        public Map<Character, Node> children;
        public boolean endOfWord;       
        
        public Node(char data, boolean endOfWord) {
            this.data = data;
            this.endOfWord = endOfWord;
            children = new HashMap<>();
        }           
    }

    public static Node createTrie(String word) {
        Node root = new Node('\0', false);
        Node curr = root;
        for (char ch: word.toCharArray()) {
            Node newNode = new Node(ch, false);
            curr.children.put(ch, newNode);            
            curr = newNode;
        }
        curr.endOfWord = true;
        return root;
    }
    
    public static boolean addToTrieOrFindPrefix(Node root, String word) {
        Node node = root;        
        for (int i=0; i < word.length(); i++) {
            char ch = word.charAt(i);
            if (node.endOfWord) {
                //end of a previous word --> which is a prefix of "word"
                return true;
            }
            if (node.children.containsKey(ch)) {
                if (i == word.length()-1) { 
                    //last char in "word" --> "word" is a prefix of another word
                    return true;
                }
                node = node.children.get(ch);
            } else {
                boolean endOfWord = (i == word.length()-1);
                Node child = new Node(ch, endOfWord);
                node.children.put(ch, child);
                node = child;
            }
        }
        return false;        
    }

    public static void noPrefix(List<String> words) {
        //build trie while searching if a word is a prefix of another
        Node trie = null;
        for (String word : words) {
            if (trie == null) {
                trie = createTrie(word);
                continue;
            }
            boolean foundPrefix = addToTrieOrFindPrefix(trie, word);
            if (foundPrefix) {
                System.out.println("BAD SET");
                System.out.println(word);
                return;
            }
        }
        System.out.println("GOOD SET");                
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> words = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        Result.noPrefix(words);

        bufferedReader.close();
    }
}
