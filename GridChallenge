import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static String gridChallenge(List<String> grid) {
        // Sort each row alphabetically
        List<String> sortedRows = new ArrayList<>();
        for (String row : grid) {
            char[] chars = row.toCharArray();
            Arrays.sort(chars);
            sortedRows.add(new String(chars));
        }
        
        // Check if columns are in ascending alphabetical order
        int columns = grid.get(0).length();
        for (int col = 0; col < columns; col++) {
            StringBuilder columnValues = new StringBuilder();
            for (String row : sortedRows) {
                columnValues.append(row.charAt(col));
            }
            String sortedColumn = columnValues.toString();
            char[] chars = sortedColumn.toCharArray();
            Arrays.sort(chars);
            String sortedColumnString = new String(chars);
            if (!sortedColumn.equals(sortedColumnString)) {
                return "NO";
            }
        }
        
        return "YES";
    }
}


public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<String> grid = IntStream.range(0, n).mapToObj(i -> {
                    try {
                        return bufferedReader.readLine();
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                    .collect(toList());

                String result = Result.gridChallenge(grid);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
